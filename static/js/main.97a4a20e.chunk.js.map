{"version":3,"sources":["components/navbar.jsx","services/anime.service.js","components/animes.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","target","animeService","getAnimes","getEpisodes","_callee","id","requestOptions","response","regenerator_default","wrap","_context","prev","next","headers","Content-Type","Accept","fetch","concat","sent","json","abrupt","stop","_callee2","_context2","initialState","animes","listIds","clicked","Animes","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClear","setState","handleRandom","handleClick","random","setInterval","_loop","i","setIds","_ref","asyncToGenerator","mark","toConsumableArray","state","_x","apply","arguments","clearInterval","Math","ceil","toString","console","log","includes","setTimeout","_this2","_this$state","data","react","style","margin","onClick","disabled","map","anime","undefined","key","attributes","canonicalTitle","titles","ja_jp","averageRating","ageRatingGuide","posterImage","small","src","alt","width","height","Component","App","navbar","src_components_animes","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97a4a20e.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Navbar = () => (\r\n  <nav className=\"navbar navbar-dark bg-dark\">\r\n    <a className=\"navbar-brand\" href=\"#\">\r\n      AnimeList\r\n    </a>\r\n    <a\r\n      className=\"nav-link\"\r\n      target=\"_blank\"\r\n      href=\"https://github.com/pr-sanchez/animelist\"\r\n    >\r\n      Github\r\n    </a>\r\n  </nav>\r\n);\r\nexport default Navbar;\r\n","export const animeService = {\r\n  getAnimes,\r\n  getEpisodes\r\n};\r\n\r\nasync function getAnimes(id) {\r\n  const requestOptions = {\r\n    headers: {\r\n      \"Content-Type\": \"application/vnd.api+json\",\r\n      Accept: \"application/vnd.api+json\"\r\n    }\r\n  };\r\n  const response = await fetch(\r\n    `https://kitsu.io/api/edge/anime/${id}`,\r\n    requestOptions\r\n  );\r\n  return await response.json();\r\n}\r\nasync function getEpisodes(id) {\r\n  const response = await fetch(\r\n    `https://kitsu.io/api/edge/anime/${id}/episodes`\r\n  );\r\n  return await response.json();\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { animeService } from \"../services/anime.service\";\r\nimport \"./animes.css\";\r\nconst initialState = {\r\n  animes: [],\r\n  listIds: [],\r\n  clicked: false\r\n};\r\nclass Animes extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = initialState;\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // this.random = setInterval(() => {\r\n    //   for (let i = 0; i < 10; i++) {\r\n    //     const setIds = async id => {\r\n    //       const animes = await animeService.getAnimes(id);\r\n    //       this.setState({\r\n    //         animes: [animes, ...this.state.animes]\r\n    //       });\r\n    //     };\r\n    //     if (i === 9) clearInterval(this.random);\r\n    //     else {\r\n    //       let id = Math.ceil(Math.random() * (999 - 1) - 1);\r\n    //       setIds(id);\r\n    //     }\r\n    //   }\r\n    // }, 500);\r\n    // const animes = animeService.getAnimes(this.state.random);\r\n    // this.setState({ ...this.state.animes, animes });\r\n    // const episodes = await animeService.getEpisodes(1);\r\n    // // episodes.attributes.map(attribute => {\r\n    // // });\r\n    // episodes.data.map(episode => {\r\n    //   console.log(episode);\r\n    // });\r\n  }\r\n\r\n  // async getEpisodes(id) {\r\n  //   const episodes = await animeService.getEpisodes(1);\r\n  //   // episodes.attributes.map(attribute => {\r\n  //   // });\r\n  //   episodes.map(episode => {\r\n  //     console.log(episode.attributes);\r\n  //   });\r\n  //   // attributes.map(attribute => {\r\n  //   //   return console.log(attribute);\r\n  //   // });\r\n  // }\r\n  handleClear = () => {\r\n    this.setState(initialState);\r\n  };\r\n  handleRandom = () => {\r\n    this.handleClick();\r\n    this.random = setInterval(() => {\r\n      for (let i = 0; i < 11; i++) {\r\n        const setIds = async id => {\r\n          const animes = await animeService.getAnimes(id);\r\n          this.setState({\r\n            animes: [animes, ...this.state.animes]\r\n          });\r\n        };\r\n        if (i === 10) clearInterval(this.random);\r\n        else {\r\n          let id = Math.ceil(Math.random() * (9999 - 1) - 1).toString();\r\n          console.log(id);\r\n          this.setState(\r\n            {\r\n              listIds: [id, ...this.state.listIds]\r\n            },\r\n            () => {\r\n              if (!this.state.listIds.includes(\"id\")) {\r\n                setIds(id);\r\n              }\r\n            }\r\n          );\r\n        }\r\n      }\r\n    }, 500);\r\n  };\r\n  handleClick = () => {\r\n    this.setState(\r\n      {\r\n        clicked: true\r\n      },\r\n      () => {\r\n        setTimeout(() => {\r\n          this.setState({\r\n            clicked: false\r\n          });\r\n        }, 5000);\r\n      }\r\n    );\r\n  };\r\n  render() {\r\n    const { animes, clicked } = this.state;\r\n    if (animes.data === 0) {\r\n      return <h2>The are no animes in the database</h2>;\r\n    }\r\n    // console.log(animes);\r\n    return (\r\n      <Fragment>\r\n        <div className=\"d-flex justify-content-center \">\r\n          <div className=\"loading\">\r\n            {clicked && (\r\n              <div className=\"circle circleAnimated\">\r\n                <div className=\"innerBox\" />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"container-fluid\"\r\n          style={{ margin: \"20px 0px 20px 0px\" }}\r\n        >\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <button\r\n                onClick={() => this.handleRandom()}\r\n                className=\"btn btn-primary btn-lg btn-block\"\r\n                disabled={clicked ? true : false}\r\n              >\r\n                Search 10 random\r\n              </button>\r\n            </div>\r\n            <div className=\"col\">\r\n              <button\r\n                onClick={() => this.handleClear()}\r\n                disabled={clicked ? true : false}\r\n                className=\"btn btn-secondary btn-lg btn-block\"\r\n              >\r\n                Clear results\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* <p>There are {animes.length} animes i n the database</p> */}\r\n\r\n        <div className=\"gridContainer\">\r\n          {animes &&\r\n            animes.map(anime => {\r\n              if (anime.data !== undefined) {\r\n                return (\r\n                  <div className=\"gridItem\" key={anime.data.id}>\r\n                    {anime.data.attributes.canonicalTitle !== undefined && (\r\n                      <Fragment>\r\n                        <h3 className=\"animeTitle\">\r\n                          {anime.data.attributes.canonicalTitle}\r\n                          <br />\r\n                          {anime.data.attributes.titles.ja_jp}\r\n                        </h3>\r\n                        <h4 className=\"animeInformation\">\r\n                          {anime.data.attributes.averageRating}\r\n                          <br />\r\n                          {anime.data.attributes.ageRatingGuide}\r\n                        </h4>\r\n                      </Fragment>\r\n                    )}\r\n                    {anime.data.attributes.posterImage.small !== undefined && (\r\n                      <img\r\n                        src={anime.data.attributes.posterImage.small}\r\n                        alt=\"Cover image\"\r\n                        width={\"80%\"}\r\n                        height={\"auto\"}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                );\r\n              } else {\r\n                return null;\r\n              }\r\n            })}\r\n        </div>\r\n        {/* \r\n              // return (\r\n              //   <div className=\"grid-item\" key={anime.id}>\r\n              //     <h3>{anime.attributes.canonicalTitle}</h3>\r\n              //     <h5>{anime.attributes.averageRating}</h5>\r\n              //     <h5>{anime.attributes.ageRatingGuide}</h5>\r\n              //     <img\r\n              //       src={anime.attributes.posterImage.tiny}\r\n              //       width={100}\r\n              //       height={100}\r\n              //     />\r\n              // </div>\r\n              // ); */}\r\n        {/* <div>episodes: {this.getEpisodes(1)}</div> */}\r\n        {/* \r\ncreatedAt: \"2013-02-20T16:00:13.609Z\"\r\nendDate: \"1999-04-24\"\r\nepisodeCount: 26\r\nepisodeLength: 25\r\nfavoritesCount: 4162\r\nnextRelease: null\r\nnsfw: false\r\npopularityRank: 21\r\nposterImage: {tiny: \"https://media.kitsu.io/anime/poster_images/1/tiny.jpg?1431697256\", small: \"https://media.kitsu.io/anime/poster_images/1/small.jpg?1431697256\", medium: \"https://media.kitsu.io/anime/poster_images/1/medium.jpg?1431697256\", small: \"https://media.kitsu.io/anime/poster_images/1/small.jpg?1431697256\", original: \"https://media.kitsu.io/anime/poster_images/1/original.jpg?1431697256\", …}\r\nratingFrequencies: {2: \"2194\", 3: \"43\", 4: \"366\", 5: \"20\", 6: \"132\", 7: \"23\", 8: \"2119\", 9: \"29\", 10: \"510\", 11: \"36\", 12: \"1858\", 13: \"91\", 14: \"4993\", 15: \"207\", 16: \"6019\", 17: \"368\", 18: \"7274\", 19: \"360\", 20: \"24899\"}\r\nratingRank: 46\r\nshowType: \"TV\"\r\nslug: \"cowboy-bebop\"\r\nstartDate: \"1998-04-03\"\r\nstatus: \"finished\"\r\nsubtype: \"TV\"\r\nsynopsis: \"I */}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nexport default Animes;\r\n","import React, { Component, Fragment } from \"react\";\nimport Navbar from \"./components/navbar\";\nimport Animes from \"./components/animes\";\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Navbar />\n        <Animes />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}